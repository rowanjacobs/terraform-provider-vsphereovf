// Code generated by counterfeiter. DO NOT EDIT.
package searchfakes

import (
	"sync"

	"github.com/rowanjacobs/terraform-provider-vsphereovf/vsphereovf/search"
	"github.com/vmware/govmomi/object"
)

type FakeFinder struct {
	DatacenterStub        func(string) (*object.Datacenter, error)
	datacenterMutex       sync.RWMutex
	datacenterArgsForCall []struct {
		arg1 string
	}
	datacenterReturns struct {
		result1 *object.Datacenter
		result2 error
	}
	datacenterReturnsOnCall map[int]struct {
		result1 *object.Datacenter
		result2 error
	}
	DatastoreStub        func(string) (*object.Datastore, error)
	datastoreMutex       sync.RWMutex
	datastoreArgsForCall []struct {
		arg1 string
	}
	datastoreReturns struct {
		result1 *object.Datastore
		result2 error
	}
	datastoreReturnsOnCall map[int]struct {
		result1 *object.Datastore
		result2 error
	}
	FolderStub        func(string) (*object.Folder, error)
	folderMutex       sync.RWMutex
	folderArgsForCall []struct {
		arg1 string
	}
	folderReturns struct {
		result1 *object.Folder
		result2 error
	}
	folderReturnsOnCall map[int]struct {
		result1 *object.Folder
		result2 error
	}
	NetworkStub        func(string) (object.NetworkReference, error)
	networkMutex       sync.RWMutex
	networkArgsForCall []struct {
		arg1 string
	}
	networkReturns struct {
		result1 object.NetworkReference
		result2 error
	}
	networkReturnsOnCall map[int]struct {
		result1 object.NetworkReference
		result2 error
	}
	ResourcePoolStub        func(string) (*object.ResourcePool, error)
	resourcePoolMutex       sync.RWMutex
	resourcePoolArgsForCall []struct {
		arg1 string
	}
	resourcePoolReturns struct {
		result1 *object.ResourcePool
		result2 error
	}
	resourcePoolReturnsOnCall map[int]struct {
		result1 *object.ResourcePool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFinder) Datacenter(arg1 string) (*object.Datacenter, error) {
	fake.datacenterMutex.Lock()
	ret, specificReturn := fake.datacenterReturnsOnCall[len(fake.datacenterArgsForCall)]
	fake.datacenterArgsForCall = append(fake.datacenterArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Datacenter", []interface{}{arg1})
	fake.datacenterMutex.Unlock()
	if fake.DatacenterStub != nil {
		return fake.DatacenterStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.datacenterReturns.result1, fake.datacenterReturns.result2
}

func (fake *FakeFinder) DatacenterCallCount() int {
	fake.datacenterMutex.RLock()
	defer fake.datacenterMutex.RUnlock()
	return len(fake.datacenterArgsForCall)
}

func (fake *FakeFinder) DatacenterArgsForCall(i int) string {
	fake.datacenterMutex.RLock()
	defer fake.datacenterMutex.RUnlock()
	return fake.datacenterArgsForCall[i].arg1
}

func (fake *FakeFinder) DatacenterReturns(result1 *object.Datacenter, result2 error) {
	fake.DatacenterStub = nil
	fake.datacenterReturns = struct {
		result1 *object.Datacenter
		result2 error
	}{result1, result2}
}

func (fake *FakeFinder) DatacenterReturnsOnCall(i int, result1 *object.Datacenter, result2 error) {
	fake.DatacenterStub = nil
	if fake.datacenterReturnsOnCall == nil {
		fake.datacenterReturnsOnCall = make(map[int]struct {
			result1 *object.Datacenter
			result2 error
		})
	}
	fake.datacenterReturnsOnCall[i] = struct {
		result1 *object.Datacenter
		result2 error
	}{result1, result2}
}

func (fake *FakeFinder) Datastore(arg1 string) (*object.Datastore, error) {
	fake.datastoreMutex.Lock()
	ret, specificReturn := fake.datastoreReturnsOnCall[len(fake.datastoreArgsForCall)]
	fake.datastoreArgsForCall = append(fake.datastoreArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Datastore", []interface{}{arg1})
	fake.datastoreMutex.Unlock()
	if fake.DatastoreStub != nil {
		return fake.DatastoreStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.datastoreReturns.result1, fake.datastoreReturns.result2
}

func (fake *FakeFinder) DatastoreCallCount() int {
	fake.datastoreMutex.RLock()
	defer fake.datastoreMutex.RUnlock()
	return len(fake.datastoreArgsForCall)
}

func (fake *FakeFinder) DatastoreArgsForCall(i int) string {
	fake.datastoreMutex.RLock()
	defer fake.datastoreMutex.RUnlock()
	return fake.datastoreArgsForCall[i].arg1
}

func (fake *FakeFinder) DatastoreReturns(result1 *object.Datastore, result2 error) {
	fake.DatastoreStub = nil
	fake.datastoreReturns = struct {
		result1 *object.Datastore
		result2 error
	}{result1, result2}
}

func (fake *FakeFinder) DatastoreReturnsOnCall(i int, result1 *object.Datastore, result2 error) {
	fake.DatastoreStub = nil
	if fake.datastoreReturnsOnCall == nil {
		fake.datastoreReturnsOnCall = make(map[int]struct {
			result1 *object.Datastore
			result2 error
		})
	}
	fake.datastoreReturnsOnCall[i] = struct {
		result1 *object.Datastore
		result2 error
	}{result1, result2}
}

func (fake *FakeFinder) Folder(arg1 string) (*object.Folder, error) {
	fake.folderMutex.Lock()
	ret, specificReturn := fake.folderReturnsOnCall[len(fake.folderArgsForCall)]
	fake.folderArgsForCall = append(fake.folderArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Folder", []interface{}{arg1})
	fake.folderMutex.Unlock()
	if fake.FolderStub != nil {
		return fake.FolderStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.folderReturns.result1, fake.folderReturns.result2
}

func (fake *FakeFinder) FolderCallCount() int {
	fake.folderMutex.RLock()
	defer fake.folderMutex.RUnlock()
	return len(fake.folderArgsForCall)
}

func (fake *FakeFinder) FolderArgsForCall(i int) string {
	fake.folderMutex.RLock()
	defer fake.folderMutex.RUnlock()
	return fake.folderArgsForCall[i].arg1
}

func (fake *FakeFinder) FolderReturns(result1 *object.Folder, result2 error) {
	fake.FolderStub = nil
	fake.folderReturns = struct {
		result1 *object.Folder
		result2 error
	}{result1, result2}
}

func (fake *FakeFinder) FolderReturnsOnCall(i int, result1 *object.Folder, result2 error) {
	fake.FolderStub = nil
	if fake.folderReturnsOnCall == nil {
		fake.folderReturnsOnCall = make(map[int]struct {
			result1 *object.Folder
			result2 error
		})
	}
	fake.folderReturnsOnCall[i] = struct {
		result1 *object.Folder
		result2 error
	}{result1, result2}
}

func (fake *FakeFinder) Network(arg1 string) (object.NetworkReference, error) {
	fake.networkMutex.Lock()
	ret, specificReturn := fake.networkReturnsOnCall[len(fake.networkArgsForCall)]
	fake.networkArgsForCall = append(fake.networkArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Network", []interface{}{arg1})
	fake.networkMutex.Unlock()
	if fake.NetworkStub != nil {
		return fake.NetworkStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.networkReturns.result1, fake.networkReturns.result2
}

func (fake *FakeFinder) NetworkCallCount() int {
	fake.networkMutex.RLock()
	defer fake.networkMutex.RUnlock()
	return len(fake.networkArgsForCall)
}

func (fake *FakeFinder) NetworkArgsForCall(i int) string {
	fake.networkMutex.RLock()
	defer fake.networkMutex.RUnlock()
	return fake.networkArgsForCall[i].arg1
}

func (fake *FakeFinder) NetworkReturns(result1 object.NetworkReference, result2 error) {
	fake.NetworkStub = nil
	fake.networkReturns = struct {
		result1 object.NetworkReference
		result2 error
	}{result1, result2}
}

func (fake *FakeFinder) NetworkReturnsOnCall(i int, result1 object.NetworkReference, result2 error) {
	fake.NetworkStub = nil
	if fake.networkReturnsOnCall == nil {
		fake.networkReturnsOnCall = make(map[int]struct {
			result1 object.NetworkReference
			result2 error
		})
	}
	fake.networkReturnsOnCall[i] = struct {
		result1 object.NetworkReference
		result2 error
	}{result1, result2}
}

func (fake *FakeFinder) ResourcePool(arg1 string) (*object.ResourcePool, error) {
	fake.resourcePoolMutex.Lock()
	ret, specificReturn := fake.resourcePoolReturnsOnCall[len(fake.resourcePoolArgsForCall)]
	fake.resourcePoolArgsForCall = append(fake.resourcePoolArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ResourcePool", []interface{}{arg1})
	fake.resourcePoolMutex.Unlock()
	if fake.ResourcePoolStub != nil {
		return fake.ResourcePoolStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.resourcePoolReturns.result1, fake.resourcePoolReturns.result2
}

func (fake *FakeFinder) ResourcePoolCallCount() int {
	fake.resourcePoolMutex.RLock()
	defer fake.resourcePoolMutex.RUnlock()
	return len(fake.resourcePoolArgsForCall)
}

func (fake *FakeFinder) ResourcePoolArgsForCall(i int) string {
	fake.resourcePoolMutex.RLock()
	defer fake.resourcePoolMutex.RUnlock()
	return fake.resourcePoolArgsForCall[i].arg1
}

func (fake *FakeFinder) ResourcePoolReturns(result1 *object.ResourcePool, result2 error) {
	fake.ResourcePoolStub = nil
	fake.resourcePoolReturns = struct {
		result1 *object.ResourcePool
		result2 error
	}{result1, result2}
}

func (fake *FakeFinder) ResourcePoolReturnsOnCall(i int, result1 *object.ResourcePool, result2 error) {
	fake.ResourcePoolStub = nil
	if fake.resourcePoolReturnsOnCall == nil {
		fake.resourcePoolReturnsOnCall = make(map[int]struct {
			result1 *object.ResourcePool
			result2 error
		})
	}
	fake.resourcePoolReturnsOnCall[i] = struct {
		result1 *object.ResourcePool
		result2 error
	}{result1, result2}
}

func (fake *FakeFinder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.datacenterMutex.RLock()
	defer fake.datacenterMutex.RUnlock()
	fake.datastoreMutex.RLock()
	defer fake.datastoreMutex.RUnlock()
	fake.folderMutex.RLock()
	defer fake.folderMutex.RUnlock()
	fake.networkMutex.RLock()
	defer fake.networkMutex.RUnlock()
	fake.resourcePoolMutex.RLock()
	defer fake.resourcePoolMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFinder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ search.Finder = new(FakeFinder)
