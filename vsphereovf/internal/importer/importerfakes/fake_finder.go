// Code generated by counterfeiter. DO NOT EDIT.
package importerfakes

import (
	"sync"

	"github.com/rowanjacobs/terraform-provider-vsphereovf/vsphereovf/internal/importer"
	"github.com/vmware/govmomi/vim25/types"
)

type FakeFinder struct {
	NetworkStub        func(string) (types.ManagedObjectReference, error)
	networkMutex       sync.RWMutex
	networkArgsForCall []struct {
		arg1 string
	}
	networkReturns struct {
		result1 types.ManagedObjectReference
		result2 error
	}
	networkReturnsOnCall map[int]struct {
		result1 types.ManagedObjectReference
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFinder) Network(arg1 string) (types.ManagedObjectReference, error) {
	fake.networkMutex.Lock()
	ret, specificReturn := fake.networkReturnsOnCall[len(fake.networkArgsForCall)]
	fake.networkArgsForCall = append(fake.networkArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Network", []interface{}{arg1})
	fake.networkMutex.Unlock()
	if fake.NetworkStub != nil {
		return fake.NetworkStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.networkReturns.result1, fake.networkReturns.result2
}

func (fake *FakeFinder) NetworkCallCount() int {
	fake.networkMutex.RLock()
	defer fake.networkMutex.RUnlock()
	return len(fake.networkArgsForCall)
}

func (fake *FakeFinder) NetworkArgsForCall(i int) string {
	fake.networkMutex.RLock()
	defer fake.networkMutex.RUnlock()
	return fake.networkArgsForCall[i].arg1
}

func (fake *FakeFinder) NetworkReturns(result1 types.ManagedObjectReference, result2 error) {
	fake.NetworkStub = nil
	fake.networkReturns = struct {
		result1 types.ManagedObjectReference
		result2 error
	}{result1, result2}
}

func (fake *FakeFinder) NetworkReturnsOnCall(i int, result1 types.ManagedObjectReference, result2 error) {
	fake.NetworkStub = nil
	if fake.networkReturnsOnCall == nil {
		fake.networkReturnsOnCall = make(map[int]struct {
			result1 types.ManagedObjectReference
			result2 error
		})
	}
	fake.networkReturnsOnCall[i] = struct {
		result1 types.ManagedObjectReference
		result2 error
	}{result1, result2}
}

func (fake *FakeFinder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.networkMutex.RLock()
	defer fake.networkMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFinder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ importer.Finder = new(FakeFinder)
