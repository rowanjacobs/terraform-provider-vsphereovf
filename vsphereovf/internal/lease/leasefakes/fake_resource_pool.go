// Code generated by counterfeiter. DO NOT EDIT.
package leasefakes

import (
	"context"
	"sync"

	"github.com/rowanjacobs/terraform-provider-vsphereovf/vsphere/internal/lease"
	"github.com/vmware/govmomi/object"
	"github.com/vmware/govmomi/vim25/types"
)

type FakeResourcePool struct {
	ImportVAppStub        func(context.Context, types.BaseImportSpec, *object.Folder, *object.HostSystem) (lease.NFCLease, error)
	importVAppMutex       sync.RWMutex
	importVAppArgsForCall []struct {
		arg1 context.Context
		arg2 types.BaseImportSpec
		arg3 *object.Folder
		arg4 *object.HostSystem
	}
	importVAppReturns struct {
		result1 lease.NFCLease
		result2 error
	}
	importVAppReturnsOnCall map[int]struct {
		result1 lease.NFCLease
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeResourcePool) ImportVApp(arg1 context.Context, arg2 types.BaseImportSpec, arg3 *object.Folder, arg4 *object.HostSystem) (lease.NFCLease, error) {
	fake.importVAppMutex.Lock()
	ret, specificReturn := fake.importVAppReturnsOnCall[len(fake.importVAppArgsForCall)]
	fake.importVAppArgsForCall = append(fake.importVAppArgsForCall, struct {
		arg1 context.Context
		arg2 types.BaseImportSpec
		arg3 *object.Folder
		arg4 *object.HostSystem
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ImportVApp", []interface{}{arg1, arg2, arg3, arg4})
	fake.importVAppMutex.Unlock()
	if fake.ImportVAppStub != nil {
		return fake.ImportVAppStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.importVAppReturns.result1, fake.importVAppReturns.result2
}

func (fake *FakeResourcePool) ImportVAppCallCount() int {
	fake.importVAppMutex.RLock()
	defer fake.importVAppMutex.RUnlock()
	return len(fake.importVAppArgsForCall)
}

func (fake *FakeResourcePool) ImportVAppArgsForCall(i int) (context.Context, types.BaseImportSpec, *object.Folder, *object.HostSystem) {
	fake.importVAppMutex.RLock()
	defer fake.importVAppMutex.RUnlock()
	return fake.importVAppArgsForCall[i].arg1, fake.importVAppArgsForCall[i].arg2, fake.importVAppArgsForCall[i].arg3, fake.importVAppArgsForCall[i].arg4
}

func (fake *FakeResourcePool) ImportVAppReturns(result1 lease.NFCLease, result2 error) {
	fake.ImportVAppStub = nil
	fake.importVAppReturns = struct {
		result1 lease.NFCLease
		result2 error
	}{result1, result2}
}

func (fake *FakeResourcePool) ImportVAppReturnsOnCall(i int, result1 lease.NFCLease, result2 error) {
	fake.ImportVAppStub = nil
	if fake.importVAppReturnsOnCall == nil {
		fake.importVAppReturnsOnCall = make(map[int]struct {
			result1 lease.NFCLease
			result2 error
		})
	}
	fake.importVAppReturnsOnCall[i] = struct {
		result1 lease.NFCLease
		result2 error
	}{result1, result2}
}

func (fake *FakeResourcePool) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.importVAppMutex.RLock()
	defer fake.importVAppMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeResourcePool) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ lease.ResourcePool = new(FakeResourcePool)
